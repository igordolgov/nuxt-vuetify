{"remainingRequest":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\pug-plain-loader\\index.js!C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\src\\components\\ProductFilter.vue?vue&type=template&id=1bcbddc7&lang=pug&","dependencies":[{"path":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\src\\components\\ProductFilter.vue","mtime":1663129605149},{"path":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663125509296},{"path":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1663125525436},{"path":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\pug-plain-loader\\index.js","mtime":1663126338540},{"path":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663125509296},{"path":"C:\\Users\\IgorDolgov\\Desktop\\igor\\vue-internet-shop-local-main\\node_modules\\vue-loader\\lib\\index.js","mtime":1663125521252}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}